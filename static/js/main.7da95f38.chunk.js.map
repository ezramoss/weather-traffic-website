{"version":3,"sources":["WeatherCard.js","Day.js","QueryData.js","WeatherPage.js","App.js","index.js"],"names":["WeatherCard","props","Card","className","style","width","Title","fontSize","day","date","Image","src","icon","height","rounded","Body","conditions","measurement","maxTempF","maxTempC","minTempF","minTempC","Day","constructor","this","QueryData","cityQuery","console","log","tempDays","Array","locationData","axios","get","then","response","i","data","dayArray","length","Date","setDate","getDate","toLocaleDateString","weekday","newDay","name","region","country","lat","lon","WeatherPage","setMeasurement","useState","days","setDays","formData","setFormData","locations","setLocation","isChecked","setChecked","mapLongitude","setMapLongitude","mapLatitude","setMapLatitude","mapZoom","setMapZoom","map","setMap","mapElement","useRef","changeMeasurement","useEffect","undefined","tt","key","process","container","current","center","zoom","setCenter","parseFloat","on","showTrafficFlow","remove","async","setData","Form","onSubmit","event","preventDefault","Container","Row","xs","Col","Control","type","placeholder","onChange","target","value","Button","ButtonGroup","idx","ToggleButton","id","variant","checked","e","currentTarget","Math","random","ref","Footer","backgroundColor","WeatherWebsite","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7da95f38.chunk.js","sourcesContent":["import { Card, Image} from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction WeatherCard(props) {\r\n    return (\r\n      <Card className=\"mb-3\" style={({ color: \"black\" }, { width: \"20rem\" })}>\r\n        <br></br>\r\n        <Card.Title className=\"text-center\" style={{ fontSize: 45 }}>\r\n          {props.day.date}\r\n        </Card.Title>\r\n        <div>\r\n        <Image src={props.day.icon} style={{width: 50}, {height: 50}} rounded />\r\n        </div>\r\n        <Card.Body>\r\n            <h3>{props.day.conditions}</h3>\r\n            <h3>High: {props.measurement === 1 ? props.day.maxTempF :  props.day.maxTempC }</h3>\r\n            <h3>Low: {props.measurement === 1 ? props.day.minTempF :  props.day.minTempC }</h3>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n}\r\n\r\nexport default WeatherCard","export default class Day {\r\n    constructor(maxTempC, minTempC, maxTempF, minTempF, conditions, icon, date) {\r\n      this.maxTempC = maxTempC;\r\n      this.minTempC = minTempC;\r\n      this.maxTempF = maxTempF;\r\n      this.minTempF = minTempF;\r\n      this.conditions = conditions;\r\n      this.icon = icon;\r\n      this.date = date;\r\n    }\r\n}","import axios from \"axios\";\r\nimport Day from \"./Day.js\";\r\n\r\nfunction QueryData(cityQuery) {\r\n  console.log(\"cityQuery: \" + cityQuery);\r\n  let tempDays = new Array(3);\r\n  let locationData = [];\r\n  if (cityQuery === \"\") return { tempDays, locationData };\r\n  return axios.get(\"https://weather-website-backend-0be487779640.herokuapp.com/getWeather/\" + cityQuery).then((response) => {\r\n      console.log(response);\r\n      for (let i = 0; i < response.data.dayArray.length; i++) {\r\n        var date = new Date(response.data.dayArray[i][\"date\"]);\r\n        date.setDate(date.getDate() + 1);\r\n        date = date.toLocaleDateString(\"en-US\", { weekday: \"long\" });\r\n        const newDay = new Day(\r\n          response.data.dayArray[i][\"maxTempC\"],\r\n          response.data.dayArray[i][\"minTempC\"],\r\n          response.data.dayArray[i][\"maxTempF\"],\r\n          response.data.dayArray[i][\"minTempF\"],\r\n          response.data.dayArray[i][\"conditions\"],\r\n          response.data.dayArray[i][\"icon\"],\r\n          date\r\n        );\r\n        tempDays[i] = newDay;\r\n      }\r\n      //Get & Set Location\r\n      locationData[0] = response.data.name;\r\n      locationData[1] = response.data.region;\r\n      locationData[2] = response.data.country;\r\n\r\n      var lat = response.data.lat;\r\n      var lon = response.data.lon;\r\n      return { tempDays, locationData, lat, lon };\r\n    });\r\n}\r\nexport default QueryData;\r\n","import WeatherCard from \"./WeatherCard.js\";\r\nimport \"./App.css\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Container,\r\n  ButtonGroup,\r\n  ToggleButton,\r\n} from \"react-bootstrap\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport QueryData from \"./QueryData.js\";\r\nimport tt from \"@tomtom-international/web-sdk-maps\";\r\n\r\nfunction WeatherPage() {\r\n  const [measurement, setMeasurement] = useState(1);\r\n  const [days, setDays] = useState([]);\r\n  const [formData, setFormData] = useState(\"\");\r\n  const [locations, setLocation] = useState([]);\r\n  const [isChecked, setChecked] = useState(\"1\");\r\n  const measurements = [\r\n    { name: \"°F\", value: \"1\" },\r\n    { name: \"°C\", value: \"2\" },\r\n  ];\r\n  var cityQuery = formData;\r\n\r\n\r\n  const [mapLongitude, setMapLongitude] = useState(-121.91599);\r\n  const [mapLatitude, setMapLatitude] = useState(37.36765);\r\n  const [mapZoom, setMapZoom] = useState(10);\r\n  const [map, setMap] = useState({});\r\n  const mapElement = useRef();\r\n  \r\n\r\n  useEffect(() => {\r\n    if(mapLongitude != undefined && mapLatitude != undefined){\r\n      var map = tt.map({\r\n        key: process.env.REACT_APP_TRAFFIC_KEY,\r\n        container: mapElement.current,\r\n        center: [mapLongitude, mapLatitude],\r\n        zoom: mapZoom\r\n      });\r\n      map.setCenter([parseFloat(mapLongitude), parseFloat(mapLatitude)]);\r\n      map.on(\"load\", function () {\r\n        map.showTrafficFlow()\r\n      })\r\n      setMap(map);\r\n      return() => map.remove(); \r\n    }\r\n  }, [mapLongitude]);\r\n\r\n  useEffect(() => {\r\n    setData();\r\n  }, [formData]);\r\n\r\n  const onFormSubmit = (event) => {\r\n    setFormData(cityQuery);\r\n    event.preventDefault();\r\n  };\r\n\r\n  const onFormChange = (event) => {\r\n    cityQuery = event.target.value;\r\n  };\r\n\r\n  //Change Between Celsius and Fahrenheit\r\n  function changeMeasurement() {\r\n    return measurement === 1 ? setMeasurement(2) : setMeasurement(1);\r\n  }\r\n\r\n  //Query Backend & Populate Temp/Condition Arrays with Location Result\r\n  async function setData() {\r\n    let { tempDays, locationData, lat, lon } = await QueryData(cityQuery);\r\n    console.log(\"fine\" + lat+lon)\r\n    setDays(tempDays);\r\n    setLocation(locationData);\r\n    setMapLatitude(lat)\r\n    setMapLongitude(lon)\r\n  }\r\n  return (\r\n    <div>\r\n      <header className=\"App-header\"></header>\r\n      <body>\r\n        <Form onSubmit={onFormSubmit}>\r\n          <Container className=\"mt-3\">\r\n            <Row className=\"justify-content-center\" xs=\"auto\">\r\n              <h1 className=\"text\">Find Your Weather and Traffic</h1>\r\n            </Row>\r\n          </Container>\r\n          <Container className=\"mt-3\">\r\n            <Row className=\"justify-content-center\" xs=\"auto\">\r\n              <Col>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Location\"\r\n                  onChange={onFormChange}\r\n                />\r\n              </Col>\r\n              <Col>\r\n                {\" \"}\r\n                <Button type=\"submit\">Go</Button>{\" \"}\r\n              </Col>\r\n              <Col>\r\n                <ButtonGroup>\r\n                  {measurements.map((measurement, idx) => (\r\n                    <ToggleButton\r\n                      key={Math.random()}\r\n                      id={`radio-${idx}`}\r\n                      type=\"radio\"\r\n                      variant={(idx = 1 ? \"outline-success\" : \"outline-danger\")}\r\n                      name=\"radio\"\r\n                      value={measurement.value}\r\n                      checked={isChecked === measurement.value}\r\n                      onChange={(e) => {\r\n                        setChecked(e.currentTarget.value);\r\n                        changeMeasurement();\r\n                      }}\r\n                    >\r\n                      {measurement.name}\r\n                    </ToggleButton>\r\n                  ))}\r\n                </ButtonGroup>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Form>\r\n\r\n        {/* Weather Cards */}\r\n\r\n        <Container className=\"mt-5\">\r\n          <Row className=\"justify-content-center\" xs=\"auto\">\r\n            <h1>\r\n              {locations[0] === undefined\r\n                ? \"\"\r\n                : locations[0] + \", \" + locations[1] + \", \" + locations[2]}\r\n            </h1>\r\n          </Row>\r\n          <Row className=\"justify-content-center\">\r\n            {days.map((day) => (\r\n              <WeatherCard day={day} measurement={measurement} />\r\n            ))}\r\n          </Row>\r\n        </Container>\r\n        {/*style={{height: \"100%\", width: \"50%\"}}*/}\r\n        <div ref = {mapElement} className=\"map\"></div>\r\n        <Card.Footer\r\n          className=\"custom-footer\"\r\n          style={{ backgroundColor: \"grey\" }}\r\n        >\r\n          <p>\r\n            This website is a passion project and is not intended for detailed\r\n            reports. Weather and traffic may not be available in certian\r\n            areas. Please direct any questions, comments, or concerns\r\n            to ezramoss4@gmail.com\r\n          </p>\r\n        </Card.Footer>\r\n      </body>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherPage;\r\n","import \"./App.css\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport WeatherPage from \"./WeatherPage.js\";\n\nfunction WeatherWebsite() {\n  //Main Content\n  return <WeatherPage></WeatherPage>\n}\n\nexport default WeatherWebsite;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}