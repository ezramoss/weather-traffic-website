{"version":3,"sources":["Day.js","App.js","index.js"],"names":["Day","maxTempC","minTempC","maxTempF","minTempF","conditions","icon","date","this","globalLocations","Array","globalMeasurement","WeatherCard","props","Card","className","style","width","Title","fontSize","dayName","Image","src","height","rounded","Body","WeatherWebsite","useState","measurement","setMeasurement","days","setDays","formData","setFormData","locations","setLocation","newQuery","setQuery","isChecked","setChecked","cityQuery","changeMeasurement","useEffect","axios","get","then","response","tempDays","console","log","i","data","dayArray","length","Date","setDate","getDate","toLocaleDateString","weekday","newDay","push","name","region","country","Form","onSubmit","event","preventDefault","Container","Row","Col","xs","Control","type","placeholder","onChange","target","value","Button","ButtonGroup","map","idx","ToggleButton","id","variant","checked","e","currentTarget","Math","random","day","Footer","backgroundColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c66248c6.chunk.js","sourcesContent":["export default class Day {\r\n    constructor(maxTempC, minTempC, maxTempF, minTempF, conditions, icon, date) {\r\n      this.maxTempC = maxTempC;\r\n      this.minTempC = minTempC;\r\n      this.maxTempF = maxTempF;\r\n      this.minTempF = minTempF;\r\n      this.conditions = conditions;\r\n      this.icon = icon;\r\n      this.date = date;\r\n    }\r\n}","import \"./App.css\";\nimport { Button, Card, Form, Row, Col, Container, ButtonGroup, ToggleButton, Image,} from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\nimport Day from \"./Day.js\";\n\nvar globalLocations = new Array(3)\nvar globalMeasurement = 1\n\nfunction WeatherWebsite() {\n  const [measurement, setMeasurement] = useState(1);\n  const [days, setDays] = useState([]);\n  const [formData, setFormData] = useState(\"\");\n  const [locations, setLocation] = useState([])\n  const [newQuery, setQuery] = useState(1)\n  const [isChecked, setChecked] = useState(\"1\");\n  const measurements = [\n    { name: \"°F\", value: \"1\" },\n    { name: \"°C\", value: \"2\" },\n  ];\n  var cityQuery = formData\n\n  //Change Between Celsius and Fahrenheit\n  function changeMeasurement() {\n    return measurement === 1 ? (globalMeasurement = 2, setMeasurement(2)):\n      (globalMeasurement = 1, setMeasurement(1));\n  }\n\n  //Query Backend & Populate Temp/Condition Arrays with Location Result\n  useEffect(() => {\n    if(formData === \"\") return\n      axios.get(\"https://weather-website-backend-0be487779640.herokuapp.com/getWeather/\" + cityQuery).then((response) => {\n      const tempDays = []\n      console.log(response)\n      for(let i = 0;i < response.data.dayArray.length;i++) {\n        var date = new Date(response.data.dayArray[i]['date'])\n        date.setDate(date.getDate() + 1)\n        date = date.toLocaleDateString('en-US', { weekday: 'long' })\n        const newDay = new Day(\n          response.data.dayArray[i]['maxTempC'],\n          response.data.dayArray[i]['minTempC'],\n          response.data.dayArray[i]['maxTempF'],\n          response.data.dayArray[i]['minTempF'],\n          response.data.dayArray[i]['conditions'],\n          response.data.dayArray[i]['icon'],\n          date\n        )\n        tempDays.push(newDay)\n      }\n      setDays(tempDays)\n\n      //Get & Set Location\n      globalLocations[0] = response.data.name\n      globalLocations[1] = response.data.region\n      globalLocations[2] = response.data.country\n      setLocation(globalLocations);\n\n      //Update React to Re-Render page\n      newQuery === 1 ? setQuery(2) : setQuery(1)\n    });\n  \n  }, [formData]);\n\n  const onFormSubmit = (event) => {\n    setFormData(cityQuery);\n    event.preventDefault();\n  };\n\n  const onFormChange = (event) => {\n    cityQuery = event.target.value;\n  };\n\n  //Main Content\n  return (\n    <div>\n      <header className=\"App-header\"></header>\n      <body>\n        <Form onSubmit={onFormSubmit}>\n          <div className=\"mt-3\">\n            <Container>\n              <Row className=\"justify-content-center\">\n                <Col xs=\"auto\">\n                  <h1 className=\"text\">Find Your Weather</h1>\n                </Col>\n              </Row>\n            </Container>\n          </div>\n          <div className=\"mt-3\">\n            <Container>\n              <Row className=\"justify-content-center\">\n                <Col xs=\"auto\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter Location\"\n                    onChange={onFormChange}\n                  />\n                </Col>\n                <Col xs=\"auto\">\n                  <Button type=\"submit\">Go</Button>\n                </Col>\n                <Col xs=\"auto\">\n                  <ButtonGroup>\n                    {measurements.map((measurement, idx) => (\n                      <ToggleButton\n                        key={Math.random()}\n                        id={`radio-${idx}`}\n                        type=\"radio\"\n                        variant={\n                          (idx = 1 ? \"outline-success\" : \"outline-danger\")\n                        }\n                        name=\"radio\"\n                        value={measurement.value}\n                        checked={isChecked === measurement.value}\n                        onChange={(e) => {\n                          setChecked(e.currentTarget.value);\n                          changeMeasurement();\n                        }}\n                      >\n                        {measurement.name}\n                      </ToggleButton>\n                    ))}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n            </Container>\n          </div>\n        </Form>\n\n        {/* Weather Cards */}\n\n        <div className=\"mt-5\">\n          <Container>\n            {formData &&\n            <div>\n              <Row className=\"justify-content-center\">\n              <Col xs=\"auto\">\n                <h1>{locations[0]}, {locations[1]}, {locations[2]}</h1>\n              </Col>\n              </Row>\n              <Row className=\"justify-content-center\">\n              {days.map((day) => \n              <WeatherCard\n                dayName={day.date}\n                conditions={day.conditions}\n                icon = {day.icon}\n                maxTempC = {day.maxTempC}\n                minTempC = {day.minTempC}\n                maxTempF = {day.maxTempF}\n                minTempF = {day.minTempF}\n              />)}\n            </Row>\n            </div>\n            }\n          </Container>\n        </div>\n        <Card.Footer className=\"custom-footer\" style={{ backgroundColor: \"grey\" }}>\n          <p>This website is a passion project and is not intended for detailed weather reports. Please direct any questions, comments, or concerns to ezramoss4@gmail.com</p>\n        </Card.Footer>\n      </body>\n    </div>\n  );\n}\n\n//Weather Card Component\nfunction WeatherCard(props) {\n  return (\n    <Card className=\"mb-3\" style={({ color: \"black\" }, { width: \"20rem\" })}>\n      <br></br>\n      <Card.Title className=\"text-center\" style={{ fontSize: 45 }}>\n        {props.dayName}\n      </Card.Title>\n      <div>\n      <Image src={props.icon} style={{width: 50}, {height: 50}} rounded />\n      </div>\n      <Card.Body>\n          <h3>{props.conditions}</h3>\n          <h3>High: {globalMeasurement === 1 ? props.maxTempF :  props.maxTempC }</h3>\n          <h3>Low: {globalMeasurement === 1 ? props.minTempF :  props.minTempC }</h3>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default WeatherWebsite;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}