{"version":3,"sources":["App.js","index.js"],"names":["globalCurrentMeasurement","tempsF","Array","tempsC","globalDates","globalIcons","globalLocations","tempCondtions","WeatherCard","props","Card","className","style","width","Title","fontSize","dayName","Image","src","icon","height","rounded","Body","conditions","tempMax","tempMin","App","currentMeasurement","cityQuery","useState","temps","setTempsData","setConditions","formData","setFormData","dates","setDates","icons","setIcons","locations","setLocation","newQuery","setQuery","isChecked","setChecked","Form","onSubmit","event","axios","get","then","response","console","log","tempCount","i","data","dayArray","length","date","Date","setDate","getDate","toLocaleDateString","weekday","name","region","country","preventDefault","Container","Row","Col","xs","Control","type","placeholder","onChange","target","value","Button","ButtonGroup","map","measurement","idx","ToggleButton","id","variant","checked","e","currentTarget","Math","random","city","Footer","backgroundColor","async","Helmet","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8dced430.chunk.js","sourcesContent":["import \"./App.css\";\nimport { Button, Card, Form, Row, Col, Container, ButtonGroup, ToggleButton, Image,} from \"react-bootstrap\";\nimport React, { useState, Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\nimport Helmet from \"react-helmet\"\n\nvar globalCurrentMeasurement = 1\nvar tempsF = new Array(6);\nvar tempsC = new Array(6);\nvar globalDates = new Array(3)\nvar globalIcons = new Array(3)\nvar globalLocations = new Array(3)\nvar tempCondtions = new Array(3)\n\nfunction App() {\n  var currentMeasurement = globalCurrentMeasurement \n  var cityQuery = \"\";\n  const [temps, setTempsData] = useState([]);\n  const [conditions, setConditions] = useState([])\n  const [formData, setFormData] = useState();\n  const [dates, setDates] = useState([])\n  const [icons, setIcons] = useState([])\n  const [locations, setLocation] = useState([])\n  const [newQuery, setQuery] = useState(1)\n  const [isChecked, setChecked] = useState(\"1\");\n  const measurements = [\n    { name: \"°F\", value: \"1\" },\n    { name: \"°C\", value: \"2\" },\n  ];\n\n  //Change Between Celsius and Fahrenheit\n  function changeMeasurement() {\n    if (currentMeasurement === 1) {\n      setTempsData(tempsC);\n      currentMeasurement = 2;\n    } else {\n      setTempsData(tempsF);\n      currentMeasurement = 1;\n    }\n    globalCurrentMeasurement = currentMeasurement\n  }\n\n  //Query Backend & Populate Temp/Condition Arrays with Location Result\n  const onFormSubmit = (event) => {\n    axios.get(\"https://weather-website-backend-0be487779640.herokuapp.com/getWeather/\" + cityQuery).then((response) => {\n      \n      console.log(response)\n      var tempCount = 0\n      for(let i = 0;i < response.data.dayArray.length;i++) {\n        tempsC[tempCount] = response.data.dayArray[i]['maxTempC']\n        tempsC[tempCount+1] = response.data.dayArray[i]['minTempC']\n        tempsF[tempCount] = response.data.dayArray[i]['maxTempF']\n        tempsF[tempCount+1] = response.data.dayArray[i]['minTempF']\n        tempCondtions[i] = response.data.dayArray[i]['conditions']\n        globalIcons[i] = response.data.dayArray[i]['icon']\n        var date = new Date(response.data.dayArray[i]['date'])\n        date.setDate(date.getDate() + 1)\n        globalDates[i] = date.toLocaleDateString('en-US', { weekday: 'long' })\n        tempCount +=2\n      }\n\n      //Get Location\n      globalLocations[0] = response.data.name\n      globalLocations[1] = response.data.region\n      globalLocations[2] = response.data.country\n\n      //Set Temp based on current unit of measurement\n      currentMeasurement === 1 ? setTempsData(tempsF) : setTempsData(tempsC)\n\n      //Update React to Re-Render page\n      newQuery === 1 ? setQuery(2) : setQuery(1)\n\n      //Set Date, Location, Icon, and Conditions\n      setDates(globalDates);\n      setLocation(globalLocations);\n      setIcons(globalIcons);\n      setConditions(tempCondtions)\n      \n      globalCurrentMeasurement = currentMeasurement  \n    });\n    \n    setFormData(cityQuery);\n    event.preventDefault();\n  };\n\n  const onFormChange = (event) => {\n    cityQuery = event.target.value;\n  };\n\n  //Main Content\n  return (\n    <div>\n      <header className=\"App-header\"></header>\n      <body>\n        <Form onSubmit={onFormSubmit}>\n          <div className=\"mt-3\">\n            <Container>\n              <Row className=\"justify-content-center\">\n                <Col xs=\"auto\">\n                  <h1 className=\"text\">Find Your Weather</h1>\n                </Col>\n              </Row>\n            </Container>\n          </div>\n          <div className=\"mt-3\">\n            <Container>\n              <Row className=\"justify-content-center\">\n                <Col xs=\"auto\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter Location\"\n                    onChange={onFormChange}\n                  />\n                </Col>\n                <Col xs=\"auto\">\n                  <Button type=\"submit\">Go</Button>\n                </Col>\n                <Col xs=\"auto\">\n                  <ButtonGroup>\n                    {measurements.map((measurement, idx) => (\n                      <ToggleButton\n                        key={Math.random()}\n                        id={`radio-${idx}`}\n                        type=\"radio\"\n                        variant={\n                          (idx = 1 ? \"outline-success\" : \"outline-danger\")\n                        }\n                        name=\"radio\"\n                        value={measurement.value}\n                        checked={isChecked === measurement.value}\n                        onChange={(e) => {\n                          setChecked(e.currentTarget.value);\n                          changeMeasurement();\n                        }}\n                      >\n                        {measurement.name}\n                      </ToggleButton>\n                    ))}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n            </Container>\n          </div>\n        </Form>\n\n        {/* Weather Cards */}\n\n        <div className=\"mt-5\">\n          <Container>\n            {formData &&\n            <div>\n              <Row className=\"justify-content-center\">\n              <Col xs=\"auto\">\n                <h1>{locations[0]}, {locations[1]}, {locations[2]}</h1>\n              </Col>\n              </Row>\n              <Row className=\"justify-content-center\">\n              <WeatherCard\n                dayName={dates[0]}\n                city={formData}\n                conditions={conditions[0]}\n                icon = {icons[0]}\n                tempMax={temps[0]}\n                tempMin={temps[1]}\n              />\n              <WeatherCard\n                dayName={dates[1]}\n                city={formData}\n                conditions={conditions[1]}\n                icon = {icons[1]}\n                tempMax={temps[2]}\n                tempMin={temps[3]}\n              />\n              <WeatherCard\n                dayName={dates[2]}\n                city={formData}\n                conditions={conditions[2]}\n                icon = {icons[2]}\n                tempMax={temps[4]}\n                tempMin={temps[5]}\n              />\n            </Row>\n            </div>\n            }\n          </Container>\n        </div>\n        <Card.Footer\n          className=\"custom-footer\"\n          style={{ backgroundColor: \"grey\" }}\n        >\n          <p>This website is a passion project and is not intended for detailed weather reports. Please direct any questions, comments, or concerns to ezramoss4@gmail.com</p>\n        </Card.Footer>\n        <script src=\"//code.tidio.co/oliytrtjq4s9jdye26tnsvoyz4xbpumx.js\" async></script>\n      </body>\n      <Helmet>\n        <script src=\"//code.tidio.co/oliytrtjq4s9jdye26tnsvoyz4xbpumx.js\" async></script>\n      </Helmet>\n    </div>\n  );\n}\n\n//Weather Card Component\nfunction WeatherCard(props) {\n  return (\n    <Card className=\"mb-3\" style={({ color: \"black\" }, { width: \"20rem\" })}>\n      <br></br>\n      <Card.Title className=\"text-center\" style={{ fontSize: 45 }}>\n        {props.dayName}\n      </Card.Title>\n      <div>\n      <Image src={props.icon} style={{width: 50}, {height: 50}} rounded />\n      </div>\n      <Card.Body>\n        <div>\n          <h3>{props.conditions}</h3>\n          <h3>High: {props.tempMax}</h3>\n          <h3>Low: {props.tempMin}</h3>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}