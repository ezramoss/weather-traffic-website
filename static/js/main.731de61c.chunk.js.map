{"version":3,"sources":["WeatherCard.js","Day.js","QueryData.js","WeatherPage.js","App.js","index.js"],"names":["WeatherCard","props","Card","className","style","width","Title","fontSize","day","date","Image","src","icon","height","rounded","Body","conditions","measurement","maxTempF","maxTempC","minTempF","minTempC","Day","this","QueryData","cityQuery","console","log","tempDays","Array","locationData","axios","get","then","response","i","data","dayArray","length","Date","setDate","getDate","toLocaleDateString","weekday","newDay","name","region","country","WeatherPage","useState","setMeasurement","days","setDays","formData","setFormData","locations","setLocation","isChecked","setChecked","changeMeasurement","a","useEffect","setData","Form","onSubmit","event","preventDefault","Container","Row","xs","Col","Control","type","placeholder","onChange","target","value","Button","ButtonGroup","map","idx","ToggleButton","id","variant","checked","e","currentTarget","Math","random","undefined","Footer","backgroundColor","WeatherWebsite","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.731de61c.chunk.js","sourcesContent":["import { Card, Image} from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction WeatherCard(props) {\r\n    return (\r\n      <Card className=\"mb-3\" style={({ color: \"black\" }, { width: \"20rem\" })}>\r\n        <br></br>\r\n        <Card.Title className=\"text-center\" style={{ fontSize: 45 }}>\r\n          {props.day.date}\r\n        </Card.Title>\r\n        <div>\r\n        <Image src={props.day.icon} style={{width: 50}, {height: 50}} rounded />\r\n        </div>\r\n        <Card.Body>\r\n            <h3>{props.day.conditions}</h3>\r\n            <h3>High: {props.measurement === 1 ? props.day.maxTempF :  props.day.maxTempC }</h3>\r\n            <h3>Low: {props.measurement === 1 ? props.day.minTempF :  props.day.minTempC }</h3>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n}\r\n\r\nexport default WeatherCard","export default class Day {\r\n    constructor(maxTempC, minTempC, maxTempF, minTempF, conditions, icon, date) {\r\n      this.maxTempC = maxTempC;\r\n      this.minTempC = minTempC;\r\n      this.maxTempF = maxTempF;\r\n      this.minTempF = minTempF;\r\n      this.conditions = conditions;\r\n      this.icon = icon;\r\n      this.date = date;\r\n    }\r\n}","import axios from \"axios\";\r\nimport Day from \"./Day.js\";\r\n\r\nfunction QueryData (cityQuery) {\r\n    console.log(\"cityQuery: \" + cityQuery)\r\n    let tempDays = new Array(3)\r\n    let locationData = []\r\n    if(cityQuery === \"\") return {tempDays, locationData }\r\n      return axios.get(\"https://weather-website-backend-0be487779640.herokuapp.com/getWeather/\" + cityQuery).then((response) => {\r\n      console.log(response)\r\n      for(let i = 0;i < response.data.dayArray.length;i++) {\r\n        var date = new Date(response.data.dayArray[i]['date'])\r\n        date.setDate(date.getDate() + 1)\r\n        date = date.toLocaleDateString('en-US', { weekday: 'long' })\r\n        const newDay = new Day(\r\n          response.data.dayArray[i]['maxTempC'],\r\n          response.data.dayArray[i]['minTempC'],\r\n          response.data.dayArray[i]['maxTempF'],\r\n          response.data.dayArray[i]['minTempF'],\r\n          response.data.dayArray[i]['conditions'],\r\n          response.data.dayArray[i]['icon'],\r\n          date\r\n        )\r\n        tempDays[i] = newDay\r\n      }\r\n      //Get & Set Location\r\n      locationData[0] = response.data.name\r\n      locationData[1] = response.data.region\r\n      locationData[2] = response.data.country\r\n      return {tempDays, locationData }\r\n    });\r\n}\r\nexport default QueryData;","import WeatherCard from \"./WeatherCard.js\";\r\nimport \"./App.css\";\r\nimport { Button, Card, Form, Row, Col, Container, ButtonGroup, ToggleButton} from \"react-bootstrap\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport QueryData from \"./QueryData.js\";\r\n\r\nfunction WeatherPage() {\r\n  const [measurement, setMeasurement] = useState(1);\r\n  const [days, setDays] = useState([]);\r\n  const [formData, setFormData] = useState(\"\");\r\n  const [locations, setLocation] = useState([]);\r\n  const [isChecked, setChecked] = useState(\"1\");\r\n  const measurements = [\r\n    { name: \"°F\", value: \"1\" },\r\n    { name: \"°C\", value: \"2\" },\r\n  ];\r\n  var cityQuery = formData;\r\n\r\n  useEffect(() => {\r\n    setData();\r\n  }, [formData]);\r\n\r\n  const onFormSubmit = (event) => {\r\n    setFormData(cityQuery);\r\n    event.preventDefault();\r\n  };\r\n\r\n  const onFormChange = (event) => {\r\n    cityQuery = event.target.value;\r\n  };\r\n\r\n  //Change Between Celsius and Fahrenheit\r\n  function changeMeasurement() {\r\n    return measurement === 1 ? setMeasurement(2) : setMeasurement(1);\r\n  }\r\n\r\n  //Query Backend & Populate Temp/Condition Arrays with Location Result\r\n  async function setData() {\r\n    let { tempDays, locationData } = await QueryData(cityQuery);\r\n    setDays(tempDays);\r\n    setLocation(locationData);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <header className=\"App-header\"></header>\r\n      <body>\r\n        <Form onSubmit={onFormSubmit}>\r\n          <Container className=\"mt-3\">\r\n            <Row className=\"justify-content-center\" xs=\"auto\">\r\n              <h1 className=\"text\">Find Your Weather</h1>\r\n            </Row>\r\n          </Container>\r\n          <Container className=\"mt-3\">\r\n            <Row className=\"justify-content-center\" xs=\"auto\">\r\n              <Col>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Location\"\r\n                  onChange={onFormChange}\r\n                />\r\n              </Col>\r\n              <Col>\r\n                {\" \"}\r\n                <Button type=\"submit\">Go</Button>{\" \"}\r\n              </Col>\r\n              <Col>\r\n                <ButtonGroup>\r\n                  {measurements.map((measurement, idx) => (\r\n                    <ToggleButton\r\n                      key={Math.random()}\r\n                      id={`radio-${idx}`}\r\n                      type=\"radio\"\r\n                      variant={(idx = 1 ? \"outline-success\" : \"outline-danger\")}\r\n                      name=\"radio\"\r\n                      value={measurement.value}\r\n                      checked={isChecked === measurement.value}\r\n                      onChange={(e) => {\r\n                        setChecked(e.currentTarget.value);\r\n                        changeMeasurement();\r\n                      }}\r\n                    >\r\n                      {measurement.name}\r\n                    </ToggleButton>\r\n                  ))}\r\n                </ButtonGroup>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Form>\r\n\r\n        {/* Weather Cards */}\r\n\r\n        <Container className=\"mt-5\">\r\n          <Row className=\"justify-content-center\" xs=\"auto\">\r\n            <h1>\r\n              {locations[0] === undefined\r\n                ? \"\"\r\n                : locations[0] + \", \" + locations[1] + \", \" + locations[2]}\r\n            </h1>\r\n          </Row>\r\n          <Row className=\"justify-content-center\">\r\n            {days.map((day) => (\r\n              <WeatherCard day={day} measurement={measurement} />\r\n            ))}\r\n          </Row>\r\n        </Container>\r\n        <Card.Footer\r\n          className=\"custom-footer\"\r\n          style={{ backgroundColor: \"grey\" }}\r\n        >\r\n          <p>\r\n            This website is a passion project and is not intended for detailed\r\n            weather reports. Please direct any questions, comments, or concerns\r\n            to ezramoss4@gmail.com\r\n          </p>\r\n        </Card.Footer>\r\n      </body>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherPage;\r\n","import \"./App.css\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport WeatherPage from \"./WeatherPage.js\";\n\nfunction WeatherWebsite() {\n  //Main Content\n  console.log(process.env.REACT_APP_GOOGLE_KEY)\n  return <WeatherPage></WeatherPage>\n}\n\nexport default WeatherWebsite;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}