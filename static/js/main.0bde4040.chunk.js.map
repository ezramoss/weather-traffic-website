{"version":3,"sources":["App.js","index.js"],"names":["globalCurrentMeasurement","tempsF","Array","tempsC","globalDates","globalIcons","globalLocations","WeatherCard","props","Card","className","style","width","Title","fontSize","dayName","Image","src","icon","height","rounded","Body","conditions","tempMax","tempMin","App","currentMeasurement","tempCondtions","cityQuery","useState","temps","setTempsData","setConditions","formData","setFormData","dates","setDates","icons","setIcons","locations","setLocation","isChecked","setChecked","Form","onSubmit","event","axios","get","then","response","data","maxTempC1","minTempC1","maxTempC2","minTempC2","maxTempC3","minTempC3","maxTempF1","minTempF1","maxTempF2","minTempF2","maxTempF3","minTempF3","conditions1","conditions2","conditions3","name","region","country","tempIcon1","icon1","tempIcon2","icon2","tempIcon3","icon3","date1","Date","date2","date3","setDate","getDate","toLocaleDateString","weekday","preventDefault","Container","Row","Col","xs","Control","type","placeholder","onChange","target","value","Button","ButtonGroup","map","measurement","idx","ToggleButton","id","variant","checked","e","currentTarget","Math","random","city","Footer","backgroundColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bde4040.chunk.js","sourcesContent":["import \"./App.css\";\nimport {\n  Button,\n  Card,\n  Form,\n  Row,\n  Col,\n  Container,\n  ButtonGroup,\n  ToggleButton,\n  Image,\n} from \"react-bootstrap\";\nimport React, { useState, Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\n\nvar globalCurrentMeasurement = 1\nvar tempsF = new Array(6);\nvar tempsC = new Array(6);\nvar globalDates = new Array(6)\nvar globalIcons = new Array(3)\nvar globalLocations = new Array(3)\n\nfunction App() {\n  var currentMeasurement = globalCurrentMeasurement\n  var tempCondtions = new Array(3);  \n  var cityQuery = \"\";\n  const [temps, setTempsData] = useState(new Array(6));\n  const [conditions, setConditions] = useState(new Array(3))\n  const [formData, setFormData] = useState();\n  const [dates, setDates] = useState(new Array(3))\n  const [icons, setIcons] = useState(new Array(3))\n  const [locations, setLocation] = useState(new Array(3))\n\n  const [isChecked, setChecked] = useState(\"1\");\n  const measurements = [\n    { name: \"°F\", value: \"1\" },\n    { name: \"°C\", value: \"2\" },\n  ];\n\n  function changeMeasurement() {\n    if (currentMeasurement === 1) {\n      setTempsData(tempsC);\n      currentMeasurement = 2;\n    } else {\n      setTempsData(tempsF);\n      currentMeasurement = 1;\n    }\n    globalCurrentMeasurement = currentMeasurement\n  }\n\n  const onFormSubmit = (event) => {\n    axios.get(\"https://weather-website-backend.herokuapp.com/getweather/\" + cityQuery).then((response) => {\n      tempsC[0] = response.data.maxTempC1;\n      tempsC[1] = response.data.minTempC1;\n      tempsC[2] = response.data.maxTempC2;\n      tempsC[3] = response.data.minTempC2;\n      tempsC[4] = response.data.maxTempC3;\n      tempsC[5] = response.data.minTempC3;\n\n      tempsF[0] = response.data.maxTempF1;\n      tempsF[1] = response.data.minTempF1;\n      tempsF[2] = response.data.maxTempF2;\n      tempsF[3] = response.data.minTempF2;\n      tempsF[4] = response.data.maxTempF3;\n      tempsF[5] = response.data.minTempF3;\n\n      tempCondtions[0] = response.data.conditions1\n      tempCondtions[1] = response.data.conditions2\n      tempCondtions[2] = response.data.conditions3\n\n      globalLocations[0] = response.data.name\n      globalLocations[1] = response.data.region\n      globalLocations[2] = response.data.country\n\n      setLocation(globalLocations);\n\n      var tempIcon1 = response.data.icon1\n      var tempIcon2 = response.data.icon2\n      var tempIcon3 = response.data.icon3\n\n      globalIcons[0] = tempIcon1\n      globalIcons[1] = tempIcon2\n      globalIcons[2] = tempIcon3\n\n      setIcons(globalIcons);\n\n      var date1 = new Date(response.data.date1);\n      var date2 = new Date(response.data.date2);\n      var date3 = new Date(response.data.date3);\n\n      date1.setDate(date1.getDate() + 1)\n      date2.setDate(date2.getDate() + 1)\n      date3.setDate(date3.getDate() + 1)\n\n      globalDates[0] = date1.toLocaleDateString('en-US', { weekday: 'long' }) \n      globalDates[1] = date2.toLocaleDateString('en-US', { weekday: 'long' }) \n      globalDates[2] = date3.toLocaleDateString('en-US', { weekday: 'long' })\n\n      setDates(globalDates);\n\n      if (currentMeasurement == 1) {\n        setTempsData(tempsF);\n      } else {\n        setTempsData(tempsC);\n      }\n      setConditions(tempCondtions)\n      globalCurrentMeasurement = currentMeasurement  \n    });\n    \n    setFormData(cityQuery);\n    event.preventDefault();\n  };\n\n  const onFormChange = (event) => {\n    cityQuery = event.target.value;\n  };\n\n  return (\n    <div>\n      <header className=\"App-header\"></header>\n      <body>\n        <Form onSubmit={onFormSubmit}>\n          <div className=\"mt-3\">\n            <Container>\n              <Row className=\"justify-content-center\">\n                <Col xs=\"auto\">\n                  <h1 className=\"text\">Find Your Weather</h1>\n                </Col>\n              </Row>\n            </Container>\n          </div>\n          <div className=\"mt-3\">\n            <Container>\n              <Row className=\"justify-content-center\">\n                <Col xs=\"auto\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter Location\"\n                    onChange={onFormChange}\n                  />\n                </Col>\n                <Col xs=\"auto\">\n                  <Button type=\"submit\">Go</Button>\n                </Col>\n                <Col xs=\"auto\">\n                  <ButtonGroup>\n                    {measurements.map((measurement, idx) => (\n                      <ToggleButton\n                        key={Math.random()}\n                        id={`radio-${idx}`}\n                        type=\"radio\"\n                        variant={\n                          (idx = 1 ? \"outline-success\" : \"outline-danger\")\n                        }\n                        name=\"radio\"\n                        value={measurement.value}\n                        checked={isChecked === measurement.value}\n                        onChange={(e) => {\n                          setChecked(e.currentTarget.value);\n                          changeMeasurement();\n                        }}\n                      >\n                        {measurement.name}\n                      </ToggleButton>\n                    ))}\n                  </ButtonGroup>\n                </Col>\n              </Row>\n            </Container>\n          </div>\n        </Form>\n        <div className=\"mt-5\">\n          <Container>\n            {formData &&\n            <div>\n              <Row className=\"justify-content-center\">\n              <Col xs=\"auto\">\n                <h1>{locations[0]}, {locations[1]}, {locations[2]}</h1>\n              </Col>\n              </Row>\n              <Row className=\"justify-content-center\">\n              <WeatherCard\n                dayName={dates[0]}\n                city={formData}\n                conditions={conditions[0]}\n                icon = {icons[0]}\n                tempMax={temps[0]}\n                tempMin={temps[1]}\n              />\n              <WeatherCard\n                dayName={dates[1]}\n                city={formData}\n                conditions={conditions[1]}\n                icon = {icons[1]}\n                tempMax={temps[2]}\n                tempMin={temps[3]}\n              />\n              <WeatherCard\n                dayName={dates[2]}\n                city={formData}\n                conditions={conditions[2]}\n                icon = {icons[2]}\n                tempMax={temps[4]}\n                tempMin={temps[5]}\n              />\n            </Row>\n            </div>\n            }\n          </Container>\n        </div>\n        <Card.Footer\n          className=\"custom-footer\"\n          style={{ backgroundColor: \"grey\" }}\n        >\n          <p>This website is a passion project and is not intended for for detailed weather reports. Please direct any questions, comments, or concerns to ezramoss4@gmail.com</p>\n        </Card.Footer>\n      </body>\n    </div>\n  );\n}\n\nfunction WeatherCard(props) {\n  return (\n    <Card className=\"mb-3\" style={({ color: \"black\" }, { width: \"20rem\" })}>\n      <br></br>\n      <Card.Title className=\"text-center\" style={{ fontSize: 45 }}>\n        {props.dayName}\n      </Card.Title>\n      <div>\n      <Image src={props.icon} style={{width: 50}, {height: 50}} rounded />\n      </div>\n      <Card.Body>\n        <div>\n          <h3>{props.conditions}</h3>\n          <h3>High: {props.tempMax}</h3>\n          <h3>Low: {props.tempMin}</h3>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}