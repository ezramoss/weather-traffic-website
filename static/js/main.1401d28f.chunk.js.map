{"version":3,"sources":["Day.js","QueryData.js","App.js","index.js"],"names":["Day","maxTempC","minTempC","maxTempF","minTempF","conditions","icon","date","this","QueryData","cityQuery","console","log","tempDays","Array","locationData","axios","get","then","response","i","data","dayArray","length","Date","setDate","getDate","toLocaleDateString","weekday","newDay","name","region","country","WeatherCard","props","Card","className","style","width","Title","fontSize","day","Image","src","height","rounded","Body","measurement","WeatherWebsite","useState","setMeasurement","days","setDays","formData","setFormData","locations","setLocation","isChecked","setChecked","changeMeasurement","a","useEffect","setData","Form","onSubmit","event","preventDefault","Container","Row","xs","Col","Control","type","placeholder","onChange","target","value","Button","ButtonGroup","map","idx","ToggleButton","id","variant","checked","e","currentTarget","Math","random","undefined","Footer","backgroundColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1401d28f.chunk.js","sourcesContent":["export default class Day {\r\n    constructor(maxTempC, minTempC, maxTempF, minTempF, conditions, icon, date) {\r\n      this.maxTempC = maxTempC;\r\n      this.minTempC = minTempC;\r\n      this.maxTempF = maxTempF;\r\n      this.minTempF = minTempF;\r\n      this.conditions = conditions;\r\n      this.icon = icon;\r\n      this.date = date;\r\n    }\r\n}","import axios from \"axios\";\r\nimport Day from \"./Day.js\";\r\n\r\nfunction QueryData (cityQuery) {\r\n    console.log(\"cityQuery: \" + cityQuery)\r\n    let tempDays = new Array(3)\r\n    let locationData = []\r\n    if(cityQuery === \"\") return {tempDays, locationData }\r\n    return axios.get(\"https://weather-website-backend-0be487779640.herokuapp.com/getWeather/\" + cityQuery).then((response) => {\r\n      console.log(response)\r\n      for(let i = 0;i < response.data.dayArray.length;i++) {\r\n        var date = new Date(response.data.dayArray[i]['date'])\r\n        date.setDate(date.getDate() + 1)\r\n        date = date.toLocaleDateString('en-US', { weekday: 'long' })\r\n        const newDay = new Day(\r\n          response.data.dayArray[i]['maxTempC'],\r\n          response.data.dayArray[i]['minTempC'],\r\n          response.data.dayArray[i]['maxTempF'],\r\n          response.data.dayArray[i]['minTempF'],\r\n          response.data.dayArray[i]['conditions'],\r\n          response.data.dayArray[i]['icon'],\r\n          date\r\n        )\r\n        tempDays[i] = newDay\r\n      }\r\n      //Get & Set Location\r\n      locationData[0] = response.data.name\r\n      locationData[1] = response.data.region\r\n      locationData[2] = response.data.country\r\n      return {tempDays, locationData }\r\n    });\r\n}\r\nexport default QueryData;","import \"./App.css\";\nimport { Button, Card, Form, Row, Col, Container, ButtonGroup, ToggleButton, Image,} from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport QueryData from \"./QueryData.js\";\n\nfunction WeatherWebsite() {\n  const [measurement, setMeasurement] = useState(1);\n  const [days, setDays] = useState([]);\n  const [formData, setFormData] = useState(\"\");\n  const [locations, setLocation] = useState([])\n  const [isChecked, setChecked] = useState(\"1\");\n  const measurements = [ { name: \"°F\", value: \"1\" }, { name: \"°C\", value: \"2\" }];\n  var cityQuery = formData\n\n  //Change Between Celsius and Fahrenheit\n  function changeMeasurement() {\n    return measurement === 1 ? setMeasurement(2): setMeasurement(1);\n  }\n\n  //Query Backend & Populate Temp/Condition Arrays with Location Result\n  async function setData(){\n    let {tempDays, locationData} = await QueryData(cityQuery);\n    setDays(tempDays)\n    setLocation(locationData)\n  }\n\n  useEffect(() => {\n    setData()\n  }, [formData]);\n\n  const onFormSubmit = (event) => {\n    setFormData(cityQuery);\n    event.preventDefault();\n  };\n\n  const onFormChange = (event) => {\n    cityQuery = event.target.value;\n  };\n\n  //Main Content\n  return (\n    <div>\n      <header className=\"App-header\"></header>\n      <body>\n        <Form onSubmit={onFormSubmit}>\n          <Container className=\"mt-3\">\n            <Row className=\"justify-content-center\" xs=\"auto\">\n              <h1 className=\"text\">Find Your Weather</h1>\n            </Row>\n          </Container>\n          <Container className=\"mt-3\">\n            <Row className=\"justify-content-center\" xs=\"auto\">\n              <Col>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Enter Location\"\n                  onChange={onFormChange}\n                />\n              </Col>\n              <Col> <Button type=\"submit\">Go</Button> </Col>\n              <Col>\n                <ButtonGroup>\n                  {measurements.map((measurement, idx) => (\n                    <ToggleButton\n                      key={Math.random()}\n                      id={`radio-${idx}`}\n                      type=\"radio\"\n                      variant={\n                        (idx = 1 ? \"outline-success\" : \"outline-danger\")\n                      }\n                      name=\"radio\"\n                      value={measurement.value}\n                      checked={isChecked === measurement.value}\n                      onChange={(e) => {\n                        setChecked(e.currentTarget.value);\n                        changeMeasurement();\n                      }}>\n                        {measurement.name}\n                      </ToggleButton>\n                    ))}\n                </ButtonGroup>\n              </Col>\n            </Row>\n          </Container>\n        </Form>\n\n        {/* Weather Cards */}\n\n        <Container className=\"mt-5\">\n            <Row className=\"justify-content-center\" xs=\"auto\">\n              <h1>{locations[0] === undefined ? \"\" : locations[0] + \", \" + locations[1] + \", \" + locations[2]}</h1>\n            </Row>\n            <Row className=\"justify-content-center\">\n              {days.map((day) => <WeatherCard day = {day} measurement = {measurement}/>)}\n            </Row>\n        </Container>\n        <Card.Footer className=\"custom-footer\" style={{ backgroundColor: \"grey\" }}>\n          <p>This website is a passion project and is not intended for detailed weather reports. Please direct any questions, comments, or concerns to ezramoss4@gmail.com</p>\n        </Card.Footer>\n      </body>\n    </div>\n  );\n}\n\n//Weather Card Component\nfunction WeatherCard(props) {\n  return (\n    <Card className=\"mb-3\" style={({ color: \"black\" }, { width: \"20rem\" })}>\n      <br></br>\n      <Card.Title className=\"text-center\" style={{ fontSize: 45 }}>\n        {props.day.date}\n      </Card.Title>\n      <div>\n      <Image src={props.day.icon} style={{width: 50}, {height: 50}} rounded />\n      </div>\n      <Card.Body>\n          <h3>{props.day.conditions}</h3>\n          <h3>High: {props.measurement === 1 ? props.day.maxTempF :  props.day.maxTempC }</h3>\n          <h3>Low: {props.measurement === 1 ? props.day.minTempF :  props.day.minTempC }</h3>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default WeatherWebsite;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}